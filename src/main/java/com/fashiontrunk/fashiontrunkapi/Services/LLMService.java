package com.fashiontrunk.fashiontrunkapi.Services;

import com.fashiontrunk.fashiontrunkapi.Models.ModelEntity;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import java.util.*;

@Service
public class LLMService {

    private static final String OPENAI_API_KEY = System.getenv("OPENAI_API_KEY");
    private static final String OPENAI_URL = "https://api.openai.com/v1/chat/completions";

    public String generateDescription(List<String> labels, ModelEntity modelMetadata) {
        String prompt = String.format(
                "You are given a list of predicted labels: %s. These labels were generated by a user-uploaded image classification model '%s'. " +
                        "Write a short and informative sentence only describing what the image likely contains without outputting model information.",
                String.join(", ", labels),
                modelMetadata.toString()
        );
        Map<String, Object> message = Map.of(
                "role", "user",
                "content", prompt
        );

        Map<String, Object> body = Map.of(
                "model", "gpt-4",
                "messages", List.of(message),
                "temperature", 0.7
        );

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.setBearerAuth(OPENAI_API_KEY);

        HttpEntity<Map<String, Object>> request = new HttpEntity<>(body, headers);

        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<Map> response = restTemplate.postForEntity(OPENAI_URL, request, Map.class);

        try {
            List<Map<String, Object>> choices = (List<Map<String, Object>>) response.getBody().get("choices");
            Map<String, Object> firstChoice = choices.get(0);
            Map<String, String> messageContent = (Map<String, String>) firstChoice.get("message");
            return messageContent.get("content").trim();
        } catch (Exception e) {
            e.printStackTrace();
            return "Failed to generate description.";
        }
    }
}
